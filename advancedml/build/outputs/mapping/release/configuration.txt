# The proguard configuration file for the following section is C:\dev\lerna\oss\SimpleDNN-fork-test\advancedml\proguard-rules.pro
#
# This ProGuard configuration file illustrates how to process a program
# library, such that it remains usable as a library.
# Usage:
#     java -jar proguard.jar @library.pro
#

# Save the obfuscation mapping to a file, so we can de-obfuscate any stack
# traces later on. Keep a fixed source file attribute and all line number
# tables to get line numbers in the stack traces.
# You can comment this out if you're not interested in stack traces.

-printmapping out.map
-keepparameternames
-renamesourcefileattribute SourceFile
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,
                SourceFile,LineNumberTable,EnclosingMethod

# Preserve all annotations.

-keepattributes *Annotation*

# Preserve all public classes, and their public and protected fields and
# methods.

-keep public class * {
    public protected *;
}

# Preserve all native method names and the names of their classes.

-keepclasseswithmembernames class * {
    native <methods>;
}



-dontwarn java.lang.invoke.StringConcatFactory
# End of content from C:\dev\lerna\oss\SimpleDNN-fork-test\advancedml\proguard-rules.pro
# The proguard configuration file for the following section is C:\dev\lerna\oss\SimpleDNN-fork-test\advancedml\build\intermediates\aapt_proguard_file\release\aapt_rules.txt
# Generated by the gradle plugin

# End of content from C:\dev\lerna\oss\SimpleDNN-fork-test\advancedml\build\intermediates\aapt_proguard_file\release\aapt_rules.txt
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\c44258992908bf1228bb2fa6d10f27f4\transformed\rules\lib\META-INF\proguard\ktor.pro
# Most of volatile fields are updated with AtomicFU and should not be mangled/removed
-keepclassmembers class io.ktor.** {
    volatile <fields>;
}

-keepclassmembernames class io.ktor.** {
    volatile <fields>;
}

# client engines are loaded using ServiceLoader so we need to keep them
-keep class io.ktor.client.engine.** implements io.ktor.client.HttpClientEngineContainer


# End of content from C:\Users\miltos\.gradle\caches\transforms-3\c44258992908bf1228bb2fa6d10f27f4\transformed\rules\lib\META-INF\proguard\ktor.pro
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\3f8d6fa1ee164e060072695518daeb50\transformed\work-runtime-2.8.1\proguard.txt
-keep class * extends androidx.work.Worker
-keep class * extends androidx.work.InputMerger
# Keep all constructors on ListenableWorker, Worker
-keep public class * extends androidx.work.ListenableWorker {
    public <init>(...);
}
# We need to keep WorkerParameters for the ListenableWorker constructor
-keep class androidx.work.WorkerParameters

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\3f8d6fa1ee164e060072695518daeb50\transformed\work-runtime-2.8.1\proguard.txt
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\75156fa27225fc5e0f20dc63d394969e\transformed\rules\lib\META-INF\proguard\okhttp3.pro
# JSR 305 annotations are for embedding nullability information.
-dontwarn javax.annotation.**

# A resource is loaded with a relative path so the package of this class must be preserved.
-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase

# Animal Sniffer compileOnly dependency to ensure APIs are compatible with older versions of Java.
-dontwarn org.codehaus.mojo.animal_sniffer.*

# OkHttp platform used only on JVM and when Conscrypt dependency is available.
-dontwarn okhttp3.internal.platform.ConscryptPlatform

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\75156fa27225fc5e0f20dc63d394969e\transformed\rules\lib\META-INF\proguard\okhttp3.pro
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\fcccb621aac699dd2cc46f3f49967a4f\transformed\room-runtime-2.5.0\proguard.txt
-keep class * extends androidx.room.RoomDatabase
-dontwarn androidx.room.paging.**

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\fcccb621aac699dd2cc46f3f49967a4f\transformed\room-runtime-2.5.0\proguard.txt
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\6ccb5a45ccecdfaf128121272d3abc85\transformed\rules\lib\META-INF\com.android.tools\r8-from-1.6.0\kotlin-reflect.pro
# When editing this file, update the following files as well:
# - META-INF/com.android.tools/proguard/kotlin-reflect.pro
# - META-INF/com.android.tools/r8-upto-1.6.0/kotlin-reflect.pro
# - META-INF/proguard/kotlin-reflect.pro
# Keep Metadata annotations so they can be parsed at runtime.
-keep class kotlin.Metadata { *; }

# Keep generic signatures and annotations at runtime.
# R8 requires InnerClasses and EnclosingMethod if you keepattributes Signature.
-keepattributes InnerClasses,Signature,RuntimeVisible*Annotations,EnclosingMethod

# Don't note on API calls from different JVM versions as they're gated properly at runtime.
-dontnote kotlin.internal.PlatformImplementationsKt

# Don't note on internal APIs, as there is some class relocating that shrinkers may unnecessarily find suspicious.
-dontwarn kotlin.reflect.jvm.internal.**

# Statically guarded by try-catch block and not used on Android, see CacheByClass
-dontwarn java.lang.ClassValue

# Do not even execute try-catch block for ClassValue
-assumenosideeffects class kotlin.reflect.jvm.internal.CacheByClassKt {
    boolean useClassValue return false;
}

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\6ccb5a45ccecdfaf128121272d3abc85\transformed\rules\lib\META-INF\com.android.tools\r8-from-1.6.0\kotlin-reflect.pro
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\5ce486d52f36f07e9fc266669c91db69\transformed\rules\lib\META-INF\com.android.tools\r8\kotlinx-serialization-common.pro
# Keep `Companion` object fields of serializable classes.
# This avoids serializer lookup through `getDeclaredClasses` as done for named companion objects.
-if @kotlinx.serialization.Serializable class **
-keepclassmembers class <1> {
    static <1>$Companion Companion;
}

# Keep `serializer()` on companion objects (both default and named) of serializable classes.
-if @kotlinx.serialization.Serializable class ** {
    static **$* *;
}
-keepclassmembers class <2>$<3> {
    kotlinx.serialization.KSerializer serializer(...);
}

# Keep `INSTANCE.serializer()` of serializable objects.
-if @kotlinx.serialization.Serializable class ** {
    public static ** INSTANCE;
}
-keepclassmembers class <1> {
    public static <1> INSTANCE;
    kotlinx.serialization.KSerializer serializer(...);
}

# @Serializable and @Polymorphic are used at runtime for polymorphic serialization.
-keepattributes RuntimeVisibleAnnotations,AnnotationDefault

# Don't print notes about potential mistakes or omissions in the configuration for kotlinx-serialization classes
# See also https://github.com/Kotlin/kotlinx.serialization/issues/1900
-dontnote kotlinx.serialization.**

# Serialization core uses `java.lang.ClassValue` for caching inside these specified classes.
# If there is no `java.lang.ClassValue` (for example, in Android), then R8/ProGuard will print a warning.
# However, since in this case they will not be used, we can disable these warnings
-dontwarn kotlinx.serialization.internal.ClassValueReferences

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\5ce486d52f36f07e9fc266669c91db69\transformed\rules\lib\META-INF\com.android.tools\r8\kotlinx-serialization-common.pro
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\5ce486d52f36f07e9fc266669c91db69\transformed\rules\lib\META-INF\com.android.tools\r8\kotlinx-serialization-r8.pro
# Rule to save runtime annotations on serializable class.
# If the R8 full mode is used, annotations are removed from classes-files.
#
# For the annotation serializer, it is necessary to read the `Serializable` annotation inside the serializer<T>() function - if it is present,
# then `SealedClassSerializer` is used, if absent, then `PolymorphicSerializer'.
#
# When using R8 full mode, all interfaces will be serialized using `PolymorphicSerializer`.
#
# see https://github.com/Kotlin/kotlinx.serialization/issues/2050

 -if @kotlinx.serialization.Serializable class **
 -keep, allowshrinking, allowoptimization, allowobfuscation, allowaccessmodification class <1>

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\5ce486d52f36f07e9fc266669c91db69\transformed\rules\lib\META-INF\com.android.tools\r8\kotlinx-serialization-r8.pro
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\e8877facfe98b0a1f4cc88578a577556\transformed\rules\lib\META-INF\com.android.tools\r8\coroutines.pro
# When editing this file, update the following files as well:
# - META-INF/proguard/coroutines.pro
# - META-INF/com.android.tools/proguard/coroutines.pro

# Most of volatile fields are updated with AFU and should not be mangled
-keepclassmembers class kotlinx.coroutines.** {
    volatile <fields>;
}

# Same story for the standard library's SafeContinuation that also uses AtomicReferenceFieldUpdater
-keepclassmembers class kotlin.coroutines.SafeContinuation {
    volatile <fields>;
}

# These classes are only required by kotlinx.coroutines.debug.AgentPremain, which is only loaded when
# kotlinx-coroutines-core is used as a Java agent, so these are not needed in contexts where ProGuard is used.
-dontwarn java.lang.instrument.ClassFileTransformer
-dontwarn sun.misc.SignalHandler
-dontwarn java.lang.instrument.Instrumentation
-dontwarn sun.misc.Signal

# Only used in `kotlinx.coroutines.internal.ExceptionsConstructor`.
# The case when it is not available is hidden in a `try`-`catch`, as well as a check for Android.
-dontwarn java.lang.ClassValue

# An annotation used for build tooling, won't be directly accessed.
-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
# End of content from C:\Users\miltos\.gradle\caches\transforms-3\e8877facfe98b0a1f4cc88578a577556\transformed\rules\lib\META-INF\com.android.tools\r8\coroutines.pro
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\ea7f14df44680095a7b8ba5dc17deacb\transformed\rules\lib\META-INF\com.android.tools\r8-from-1.6.0\coroutines.pro
# Allow R8 to optimize away the FastServiceLoader.
# Together with ServiceLoader optimization in R8
# this results in direct instantiation when loading Dispatchers.Main
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatcherLoader {
    boolean FAST_SERVICE_LOADER_ENABLED return false;
}

-assumenosideeffects class kotlinx.coroutines.internal.FastServiceLoaderKt {
    boolean ANDROID_DETECTED return true;
}

# Disable support for "Missing Main Dispatcher", since we always have Android main dispatcher
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatchersKt {
    boolean SUPPORT_MISSING return false;
}

# Statically turn off all debugging facilities and assertions
-assumenosideeffects class kotlinx.coroutines.DebugKt {
    boolean getASSERTIONS_ENABLED() return false;
    boolean getDEBUG() return false;
    boolean getRECOVER_STACK_TRACES() return false;
}

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\ea7f14df44680095a7b8ba5dc17deacb\transformed\rules\lib\META-INF\com.android.tools\r8-from-1.6.0\coroutines.pro
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\ab15bfb9023c194da4a45f11046341fb\transformed\rules\lib\META-INF\proguard\okio.pro
# Animal Sniffer compileOnly dependency to ensure APIs are compatible with older versions of Java.
-dontwarn org.codehaus.mojo.animal_sniffer.*

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\ab15bfb9023c194da4a45f11046341fb\transformed\rules\lib\META-INF\proguard\okio.pro
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\9ea3841619254b35021ea6985806dbe9\transformed\core-1.6.0\proguard.txt
# Never inline methods, but allow shrinking and obfuscation.
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.ViewCompat$Api* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.WindowInsetsCompat$*Impl* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.app.NotificationCompat$*$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.os.UserHandleCompat$Api*Impl {
  <methods>;
}

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\9ea3841619254b35021ea6985806dbe9\transformed\core-1.6.0\proguard.txt
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\e5c9ebc67da229e056359b6725999ee2\transformed\annotation-experimental-1.1.0\proguard.txt
# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Ignore missing Kotlin meta-annotations so that this library can be used
# without adding a compileOnly dependency on the Kotlin standard library.
-dontwarn kotlin.Deprecated
-dontwarn kotlin.Metadata
-dontwarn kotlin.ReplaceWith
-dontwarn kotlin.annotation.AnnotationRetention
-dontwarn kotlin.annotation.AnnotationTarget
-dontwarn kotlin.annotation.Retention
-dontwarn kotlin.annotation.Target

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\e5c9ebc67da229e056359b6725999ee2\transformed\annotation-experimental-1.1.0\proguard.txt
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\a20219bdb42ae929103c0ae6594f5c15\transformed\startup-runtime-1.0.0\proguard.txt
# This Proguard rule ensures that ComponentInitializers are are neither shrunk nor obfuscated.
# This is because they are discovered and instantiated during application initialization.
-keep class * extends androidx.startup.Initializer {
    # Keep the public no-argument constructor while allowing other methods to be optimized.
    <init>();
}

-assumenosideeffects class androidx.startup.StartupLogger

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\a20219bdb42ae929103c0ae6594f5c15\transformed\startup-runtime-1.0.0\proguard.txt
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\5b137928d7ad70e0381e0196af9cc089\transformed\versionedparcelable-1.1.1\proguard.txt
-keep class * implements androidx.versionedparcelable.VersionedParcelable
-keep public class android.support.**Parcelizer { *; }
-keep public class androidx.**Parcelizer { *; }
-keep public class androidx.versionedparcelable.ParcelImpl

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\5b137928d7ad70e0381e0196af9cc089\transformed\versionedparcelable-1.1.1\proguard.txt
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\762d182477b05e8bf25fdcddb7fb6498\transformed\lifecycle-runtime-2.1.0\proguard.txt
-keepattributes *Annotation*

-keepclassmembers enum androidx.lifecycle.Lifecycle$Event {
    <fields>;
}

-keep !interface * implements androidx.lifecycle.LifecycleObserver {
}

-keep class * implements androidx.lifecycle.GeneratedAdapter {
    <init>(...);
}

-keepclassmembers class ** {
    @androidx.lifecycle.OnLifecycleEvent *;
}
# End of content from C:\Users\miltos\.gradle\caches\transforms-3\762d182477b05e8bf25fdcddb7fb6498\transformed\lifecycle-runtime-2.1.0\proguard.txt
# The proguard configuration file for the following section is C:\Users\miltos\.gradle\caches\transforms-3\ef0a22867bd7f2df73a1d5f1e697a74c\transformed\rules\lib\META-INF\proguard\androidx-annotations.pro
-keep,allowobfuscation @interface androidx.annotation.Keep
-keep @androidx.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <init>(...);
}

-keepclassmembers,allowobfuscation class * {
  @androidx.annotation.DoNotInline <methods>;
}

# End of content from C:\Users\miltos\.gradle\caches\transforms-3\ef0a22867bd7f2df73a1d5f1e697a74c\transformed\rules\lib\META-INF\proguard\androidx-annotations.pro
# The proguard configuration file for the following section is <unknown>
-keep class **.R
-keep class **.R$* {*;}
# End of content from <unknown>